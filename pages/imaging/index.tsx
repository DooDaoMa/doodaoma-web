import Head from 'next/head'
import { useEffect, useMemo } from 'react'
import { toast } from 'react-toastify'
import { ReadyState } from 'react-use-websocket'
import { JsonValue } from 'react-use-websocket/dist/lib/types'
import { useWebSocket } from 'react-use-websocket/dist/lib/use-websocket'

import { Section } from '../../components'
import { ImagingForm } from '../../components/molecules/ImagingForm'
import { selectImaging, setImagingStatus } from '../../store/features/imaging'
import { userSelector } from '../../store/features/user'
import { useAppDispatch, useAppSelector } from '../../store/hooks'
import { IImagingForm } from '../../types/imaging'
import { Message } from '../../types/message'

export default function Imaging() {
  const { currentUser } = useAppSelector(userSelector)

  return (
    <>
      {currentUser !== null ? (
        <ImagingWebSocket userId={currentUser.id} />
      ) : (
        'Connecting'
      )}
    </>
  )
}

function ImagingWebSocket({ userId }: { userId: string }) {
  const dispatch = useAppDispatch()
  const { imagingStatus } = useAppSelector(selectImaging)

  const { lastJsonMessage, readyState, sendJsonMessage } = useWebSocket(
    `${process.env.NEXT_PUBLIC_WEB_SOCKET_URL}/web`,
    {
      retryOnError: true,
      reconnectInterval: 10 * 1000,
      queryParams: {
        userId,
        deviceId: 'Test Device Id',
      },
      onError: (event) => {
        console.error(event)
        toast.error('Connect to WebSocket failed')
      },
      onOpen: () => {
        console.info('Connected to WebSocket successfully')
        toast.success('Connection established')
        sendJsonMessage({ type: 'getFilterWheelOptions' })
        sendJsonMessage({ type: 'getIsBusy' })
      },
      onClose: (event) => {
        console.info(event)
        if ([3000].includes(event.code)) {
          toast.error('Connection closed. Retry connecting...')
        }
      },
      shouldReconnect: (event) => {
        return [3000].includes(event.code)
      },
      onReconnectStop: (attempt) => {
        console.info(attempt)
      },
    },
  )

  useEffect(() => {
    if (lastJsonMessage === null) {
      return
    }
    const message = lastJsonMessage as unknown as Message
    console.info(message)

    switch (message.type) {
      case 'sendMessage': {
        toast.info(message.payload.message)
        break
      }
      case 'updateIsBusy': {
        const isBusy = message.payload.isBusy
        dispatch(setImagingStatus(isBusy ? 'busy' : 'ready'))
        break
      }
    }
  }, [lastJsonMessage, dispatch])

  useEffect(() => {
    switch (readyState) {
      case ReadyState.UNINSTANTIATED:
        dispatch(setImagingStatus('empty'))
        break
      case ReadyState.CLOSED:
        dispatch(setImagingStatus('not connect'))
        break
      case ReadyState.CONNECTING:
        dispatch(setImagingStatus('connecting'))
        break
      case ReadyState.OPEN:
        dispatch(setImagingStatus('ready'))
        break
    }
  }, [readyState, dispatch])

  const onAcquireImage = (value: IImagingForm) => {
    sendJsonMessage({
      type: 'runImagingSequence',
      payload: { ...value } as unknown as JsonValue,
    })
  }

  const onCancelExposuring = () => {
    dispatch(setImagingStatus('cancelling'))
    sendJsonMessage({ type: 'cancelRunningSequence' })
  }

  const status = useMemo(() => {
    switch (imagingStatus) {
      case 'empty':
        return { text: 'Empty', color: 'bg-zinc-500' }
      case 'not connect':
        return { text: 'Not connect', color: 'bg-red-500' }
      case 'connecting':
        return { text: 'Connecting', color: 'bg-yellow-500' }
      case 'ready':
        return { text: 'Ready', color: 'bg-green-500' }
      case 'busy':
        return { text: 'Busy', color: 'bg-orange-500' }
      case 'cancelling':
        return { text: 'Cancelling', color: 'bg-amber-500' }
    }
  }, [imagingStatus])

  return (
    <>
      <Head>
        <title>Imaging</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mb-6 flex items-center justify-between">
        <h1 className="text-3xl font-bold">Imaging</h1>
        <p className="flex items-center gap-2">
          Status: <span className="font-semibold">{status?.text}</span>
          <span
            className={`mt-1 inline-block h-3 w-3 rounded-full ${status?.color}`}></span>
        </p>
      </div>
      <Section>
        <ImagingForm
          isBusy={imagingStatus === 'busy'}
          isSubmitButtonDisabled={
            imagingStatus === 'busy' || imagingStatus !== 'ready'
          }
          isCancelling={imagingStatus === 'cancelling'}
          onSubmit={onAcquireImage}
          onCancel={onCancelExposuring}
        />
      </Section>
    </>
  )
}

Imaging.requireAuth = true

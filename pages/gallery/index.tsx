import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link'
import { useEffect } from 'react'
import { toast } from 'react-toastify'

import { Button, Loading } from '../../components'
import { fetchMyImages, gallerySelector } from '../../store/features/gallery'
import { currentUserSelector } from '../../store/features/user'
import { useAppDispatch, useAppSelector } from '../../store/hooks'
import { blackPlaceholderUrl } from '../../types/imaging'

export default function Gallery() {
  const dispatch = useAppDispatch()
  const currentUser = useAppSelector(currentUserSelector)
  const { images, fetchMyImagesState } = useAppSelector(gallerySelector)

  useEffect(() => {
    if (currentUser === null) {
      return
    }
    dispatch(fetchMyImages(undefined))
  }, [currentUser, dispatch])

  useEffect(() => {
    if (fetchMyImagesState.error) {
      toast.error('Fetch images failed')
    }
  }, [fetchMyImagesState])

  return (
    <>
      <Head>
        <title>Gallery</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="mb-6 flex justify-between">
        <h1 className="text-3xl font-bold">Your Gallery</h1>
        <Button
          type="button"
          onClick={() => dispatch(fetchMyImages(undefined))}>
          Refresh
        </Button>
      </div>
      {fetchMyImagesState.isLoading && images.length === 0 && <Loading />}
      <div className="grid grid-cols-5 gap-12">
        {images.length > 0 &&
          images.map((image) => (
            <Link key={image.id} href={`/gallery/${image.id}`}>
              <div
                className="relative h-[120px] 
                  cursor-pointer overflow-hidden rounded-md 
                  transition-transform hover:scale-105 
                  md:h-[160px] lg:h-[240px]">
                <Image
                  className="object-cover"
                  src={image.imageUrl}
                  alt={image.name}
                  placeholder="blur"
                  blurDataURL={blackPlaceholderUrl}
                  fill
                  sizes="(max-width: 768px) 100vw,
                (max-width: 1200px) 50vw,
                33vw"
                />
              </div>
            </Link>
          ))}
      </div>
    </>
  )
}

Gallery.requireAuth = true
